{
  "language": "Solidity",
  "sources": {
    "contracts/oracle/EACAggregatorProxy.sol": {
      "content": "// // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n\n// /**\n//  *Submitted for verification at Etherscan.io on 2020-09-24\n// */\n\n// /**\n//  *Submitted for verification at Etherscan.io on 2020-08-06\n// */\n\n// pragma solidity 0.6.6;\n\n\n// /**\n//  * @title The Owned contract\n//  * @notice A contract with helpers for basic contract ownership.\n//  */\n// contract Owned {\n\n//   address payable public owner;\n//   address private pendingOwner;\n\n//   event OwnershipTransferRequested(\n//     address indexed from,\n//     address indexed to\n//   );\n//   event OwnershipTransferred(\n//     address indexed from,\n//     address indexed to\n//   );\n\n//   constructor() public {\n//     owner = msg.sender;\n//   }\n\n//   /**\n//    * @dev Allows an owner to begin transferring ownership to a new address,\n//    * pending.\n//    */\n//   function transferOwnership(address _to)\n//     external\n//     onlyOwner()\n//   {\n//     pendingOwner = _to;\n\n//     emit OwnershipTransferRequested(owner, _to);\n//   }\n\n//   /**\n//    * @dev Allows an ownership transfer to be completed by the recipient.\n//    */\n//   function acceptOwnership()\n//     external\n//   {\n//     require(msg.sender == pendingOwner, \"Must be proposed owner\");\n\n//     address oldOwner = owner;\n//     owner = msg.sender;\n//     pendingOwner = address(0);\n\n//     emit OwnershipTransferred(oldOwner, msg.sender);\n//   }\n\n//   /**\n//    * @dev Reverts if called by anyone other than the contract owner.\n//    */\n//   modifier onlyOwner() {\n//     require(msg.sender == owner, \"Only callable by owner\");\n//     _;\n//   }\n\n// }\n\n// interface AggregatorInterface {\n//   function latestAnswer() external view returns (int256);\n//   function latestTimestamp() external view returns (uint256);\n//   function latestRound() external view returns (uint256);\n//   function getAnswer(uint256 roundId) external view returns (int256);\n//   function getTimestamp(uint256 roundId) external view returns (uint256);\n\n//   event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n//   event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n// }\n\n// interface AggregatorV3Interface {\n\n//   function decimals() external view returns (uint8);\n//   function description() external view returns (string memory);\n//   function version() external view returns (uint256);\n\n//   // getRoundData and latestRoundData should both raise \"No data present\"\n//   // if they do not have data to report, instead of returning unset values\n//   // which could be misinterpreted as actual reported values.\n//   function getRoundData(uint80 _roundId)\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n//   function latestRoundData()\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n\n// }\n\n// interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n// {\n// }\n\n// /**\n//  * @title A trusted proxy for updating where current answers are read from\n//  * @notice This contract provides a consistent address for the\n//  * CurrentAnwerInterface but delegates where it reads from to the owner, who is\n//  * trusted to update it.\n//  */\n// contract AggregatorProxy is AggregatorV2V3Interface, Owned {\n\n//   struct Phase {\n//     uint16 id;\n//     AggregatorV2V3Interface aggregator;\n//   }\n//   Phase private currentPhase;\n//   AggregatorV2V3Interface public proposedAggregator;\n//   mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\n\n//   uint256 constant private PHASE_OFFSET = 64;\n//   uint256 constant private PHASE_SIZE = 16;\n//   uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\n\n//   constructor(address _aggregator) public Owned() {\n//     setAggregator(_aggregator);\n//   }\n\n//   /**\n//    * @notice Reads the current answer from aggregator delegated to.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestAnswer()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (int256 answer)\n//   {\n//     return currentPhase.aggregator.latestAnswer();\n//   }\n\n//   /**\n//    * @notice Reads the last updated height from aggregator delegated to.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestTimestamp()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 updatedAt)\n//   {\n//     return currentPhase.aggregator.latestTimestamp();\n//   }\n\n//   /**\n//    * @notice get past rounds answers\n//    * @param _roundId the answer number to retrieve the answer for\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getAnswer(uint256 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (int256 answer)\n//   {\n//     if (_roundId > MAX_ID) return 0;\n\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n//     AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n//     if (address(aggregator) == address(0)) return 0;\n\n//     return aggregator.getAnswer(aggregatorRoundId);\n//   }\n\n//   /**\n//    * @notice get block timestamp when an answer was last updated\n//    * @param _roundId the answer number to retrieve the updated timestamp for\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getTimestamp(uint256 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 updatedAt)\n//   {\n//     if (_roundId > MAX_ID) return 0;\n\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n//     AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n//     if (address(aggregator) == address(0)) return 0;\n\n//     return aggregator.getTimestamp(aggregatorRoundId);\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated. This\n//    * ID includes the proxy's phase, to make sure round IDs increase even when\n//    * switching to a newly deployed aggregator.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestRound()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 roundId)\n//   {\n//     Phase memory phase = currentPhase; // cache storage reads\n//     return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\n//   }\n\n//   /**\n//    * @notice get data about a round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @param _roundId the requested round ID as presented through the proxy, this\n//    * is made up of the aggregator's round ID with the phase ID encoded in the\n//    * two highest order bytes\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with an phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function getRoundData(uint80 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n\n//     (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 ansIn\n//     ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\n\n//     return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\n//   }\n\n//   /**\n//    * @notice get data about the latest round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with an phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function latestRoundData()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     Phase memory current = currentPhase; // cache storage reads\n\n//     (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 ansIn\n//     ) = current.aggregator.latestRoundData();\n\n//     return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedGetRoundData(uint80 _roundId)\n//     public\n//     view\n//     virtual\n//     hasProposal()\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return proposedAggregator.getRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedLatestRoundData()\n//     public\n//     view\n//     virtual\n//     hasProposal()\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return proposedAggregator.latestRoundData();\n//   }\n\n//   /**\n//    * @notice returns the current phase's aggregator address.\n//    */\n//   function aggregator()\n//     external\n//     view\n//     returns (address)\n//   {\n//     return address(currentPhase.aggregator);\n//   }\n\n//   /**\n//    * @notice returns the current phase's ID.\n//    */\n//   function phaseId()\n//     external\n//     view\n//     returns (uint16)\n//   {\n//     return currentPhase.id;\n//   }\n\n//   /**\n//    * @notice represents the number of decimals the aggregator responses represent.\n//    */\n//   function decimals()\n//     external\n//     view\n//     override\n//     returns (uint8)\n//   {\n//     return currentPhase.aggregator.decimals();\n//   }\n\n//   /**\n//    * @notice the version number representing the type of aggregator the proxy\n//    * points to.\n//    */\n//   function version()\n//     external\n//     view\n//     override\n//     returns (uint256)\n//   {\n//     return currentPhase.aggregator.version();\n//   }\n\n//   /**\n//    * @notice returns the description of the aggregator the proxy points to.\n//    */\n//   function description()\n//     external\n//     view\n//     override\n//     returns (string memory)\n//   {\n//     return currentPhase.aggregator.description();\n//   }\n\n//   /**\n//    * @notice Allows the owner to propose a new address for the aggregator\n//    * @param _aggregator The new address for the aggregator contract\n//    */\n//   function proposeAggregator(address _aggregator)\n//     external\n//     onlyOwner()\n//   {\n//     proposedAggregator = AggregatorV2V3Interface(_aggregator);\n//   }\n\n//   /**\n//    * @notice Allows the owner to confirm and change the address\n//    * to the proposed aggregator\n//    * @dev Reverts if the given address doesn't match what was previously\n//    * proposed\n//    * @param _aggregator The new address for the aggregator contract\n//    */\n//   function confirmAggregator(address _aggregator)\n//     external\n//     onlyOwner()\n//   {\n//     require(_aggregator == address(proposedAggregator), \"Invalid proposed aggregator\");\n//     delete proposedAggregator;\n//     setAggregator(_aggregator);\n//   }\n\n\n//   /*\n//    * Internal\n//    */\n\n//   function setAggregator(address _aggregator)\n//     internal\n//   {\n//     uint16 id = currentPhase.id + 1;\n//     currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\n//     phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\n//   }\n\n//   function addPhase(\n//     uint16 _phase,\n//     uint64 _originalId\n//   )\n//     internal\n//     view\n//     returns (uint80)\n//   {\n//     return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\n//   }\n\n//   function parseIds(\n//     uint256 _roundId\n//   )\n//     internal\n//     view\n//     returns (uint16, uint64)\n//   {\n//     uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\n//     uint64 aggregatorRoundId = uint64(_roundId);\n\n//     return (phaseId, aggregatorRoundId);\n//   }\n\n//   function addPhaseIds(\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound,\n//       uint16 phaseId\n//   )\n//     internal\n//     view\n//     returns (uint80, int256, uint256, uint256, uint80)\n//   {\n//     return (\n//       addPhase(phaseId, uint64(roundId)),\n//       answer,\n//       startedAt,\n//       updatedAt,\n//       addPhase(phaseId, uint64(answeredInRound))\n//     );\n//   }\n\n//   /*\n//    * Modifiers\n//    */\n\n//   modifier hasProposal() {\n//     require(address(proposedAggregator) != address(0), \"No proposed aggregator present\");\n//     _;\n//   }\n\n// }\n\n// interface AccessControllerInterface {\n//   function hasAccess(address user, bytes calldata data) external view returns (bool);\n// }\n\n// /**\n//  * @title External Access Controlled Aggregator Proxy\n//  * @notice A trusted proxy for updating where current answers are read from\n//  * @notice This contract provides a consistent address for the\n//  * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\n//  * trusted to update it.\n//  * @notice Only access enabled addresses are allowed to access getters for\n//  * aggregated answers and round information.\n//  *//**\n//  *Submitted for verification at Etherscan.io on 2020-09-24\n// */\n\n// /**\n//  *Submitted for verification at Etherscan.io on 2020-08-06\n// */\n\n// pragma solidity 0.6.6;\n\n\n// /**\n//  * @title The Owned contract\n//  * @notice A contract with helpers for basic contract ownership.\n//  */\n// contract Owned {\n\n//   address payable public owner;\n//   address private pendingOwner;\n\n//   event OwnershipTransferRequested(\n//     address indexed from,\n//     address indexed to\n//   );\n//   event OwnershipTransferred(\n//     address indexed from,\n//     address indexed to\n//   );\n\n//   constructor() public {\n//     owner = msg.sender;\n//   }\n\n//   /**\n//    * @dev Allows an owner to begin transferring ownership to a new address,\n//    * pending.\n//    */\n//   function transferOwnership(address _to)\n//     external\n//     onlyOwner()\n//   {\n//     pendingOwner = _to;\n\n//     emit OwnershipTransferRequested(owner, _to);\n//   }\n\n//   /**\n//    * @dev Allows an ownership transfer to be completed by the recipient.\n//    */\n//   function acceptOwnership()\n//     external\n//   {\n//     require(msg.sender == pendingOwner, \"Must be proposed owner\");\n\n//     address oldOwner = owner;\n//     owner = msg.sender;\n//     pendingOwner = address(0);\n\n//     emit OwnershipTransferred(oldOwner, msg.sender);\n//   }\n\n//   /**\n//    * @dev Reverts if called by anyone other than the contract owner.\n//    */\n//   modifier onlyOwner() {\n//     require(msg.sender == owner, \"Only callable by owner\");\n//     _;\n//   }\n\n// }\n\n// interface AggregatorInterface {\n//   function latestAnswer() external view returns (int256);\n//   function latestTimestamp() external view returns (uint256);\n//   function latestRound() external view returns (uint256);\n//   function getAnswer(uint256 roundId) external view returns (int256);\n//   function getTimestamp(uint256 roundId) external view returns (uint256);\n\n//   event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n//   event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n// }\n\n// interface AggregatorV3Interface {\n\n//   function decimals() external view returns (uint8);\n//   function description() external view returns (string memory);\n//   function version() external view returns (uint256);\n\n//   // getRoundData and latestRoundData should both raise \"No data present\"\n//   // if they do not have data to report, instead of returning unset values\n//   // which could be misinterpreted as actual reported values.\n//   function getRoundData(uint80 _roundId)\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n//   function latestRoundData()\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n\n// }\n\n// interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n// {\n// }\n\n// /**\n//  * @title A trusted proxy for updating where current answers are read from\n//  * @notice This contract provides a consistent address for the\n//  * CurrentAnwerInterface but delegates where it reads from to the owner, who is\n//  * trusted to update it.\n//  */\n// contract AggregatorProxy is AggregatorV2V3Interface, Owned {\n\n//   struct Phase {\n//     uint16 id;\n//     AggregatorV2V3Interface aggregator;\n//   }\n//   Phase private currentPhase;\n//   AggregatorV2V3Interface public proposedAggregator;\n//   mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\n\n//   uint256 constant private PHASE_OFFSET = 64;\n//   uint256 constant private PHASE_SIZE = 16;\n//   uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\n\n//   constructor(address _aggregator) public Owned() {\n//     setAggregator(_aggregator);\n//   }\n\n//   /**\n//    * @notice Reads the current answer from aggregator delegated to.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestAnswer()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (int256 answer)\n//   {\n//     return currentPhase.aggregator.latestAnswer();\n//   }\n\n//   /**\n//    * @notice Reads the last updated height from aggregator delegated to.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestTimestamp()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 updatedAt)\n//   {\n//     return currentPhase.aggregator.latestTimestamp();\n//   }\n\n//   /**\n//    * @notice get past rounds answers\n//    * @param _roundId the answer number to retrieve the answer for\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getAnswer(uint256 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (int256 answer)\n//   {\n//     if (_roundId > MAX_ID) return 0;\n\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n//     AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n//     if (address(aggregator) == address(0)) return 0;\n\n//     return aggregator.getAnswer(aggregatorRoundId);\n//   }\n\n//   /**\n//    * @notice get block timestamp when an answer was last updated\n//    * @param _roundId the answer number to retrieve the updated timestamp for\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getTimestamp(uint256 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 updatedAt)\n//   {\n//     if (_roundId > MAX_ID) return 0;\n\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n//     AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\n//     if (address(aggregator) == address(0)) return 0;\n\n//     return aggregator.getTimestamp(aggregatorRoundId);\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated. This\n//    * ID includes the proxy's phase, to make sure round IDs increase even when\n//    * switching to a newly deployed aggregator.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestRound()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (uint256 roundId)\n//   {\n//     Phase memory phase = currentPhase; // cache storage reads\n//     return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\n//   }\n\n//   /**\n//    * @notice get data about a round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @param _roundId the requested round ID as presented through the proxy, this\n//    * is made up of the aggregator's round ID with the phase ID encoded in the\n//    * two highest order bytes\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with an phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function getRoundData(uint80 _roundId)\n//     public\n//     view\n//     virtual\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\n\n//     (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 ansIn\n//     ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\n\n//     return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\n//   }\n\n//   /**\n//    * @notice get data about the latest round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with an phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function latestRoundData()\n//     public\n//     view\n//     virtual\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     Phase memory current = currentPhase; // cache storage reads\n\n//     (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 ansIn\n//     ) = current.aggregator.latestRoundData();\n\n//     return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedGetRoundData(uint80 _roundId)\n//     public\n//     view\n//     virtual\n//     hasProposal()\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return proposedAggregator.getRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedLatestRoundData()\n//     public\n//     view\n//     virtual\n//     hasProposal()\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return proposedAggregator.latestRoundData();\n//   }\n\n//   /**\n//    * @notice returns the current phase's aggregator address.\n//    */\n//   function aggregator()\n//     external\n//     view\n//     returns (address)\n//   {\n//     return address(currentPhase.aggregator);\n//   }\n\n//   /**\n//    * @notice returns the current phase's ID.\n//    */\n//   function phaseId()\n//     external\n//     view\n//     returns (uint16)\n//   {\n//     return currentPhase.id;\n//   }\n\n//   /**\n//    * @notice represents the number of decimals the aggregator responses represent.\n//    */\n//   function decimals()\n//     external\n//     view\n//     override\n//     returns (uint8)\n//   {\n//     return currentPhase.aggregator.decimals();\n//   }\n\n//   /**\n//    * @notice the version number representing the type of aggregator the proxy\n//    * points to.\n//    */\n//   function version()\n//     external\n//     view\n//     override\n//     returns (uint256)\n//   {\n//     return currentPhase.aggregator.version();\n//   }\n\n//   /**\n//    * @notice returns the description of the aggregator the proxy points to.\n//    */\n//   function description()\n//     external\n//     view\n//     override\n//     returns (string memory)\n//   {\n//     return currentPhase.aggregator.description();\n//   }\n\n//   /**\n//    * @notice Allows the owner to propose a new address for the aggregator\n//    * @param _aggregator The new address for the aggregator contract\n//    */\n//   function proposeAggregator(address _aggregator)\n//     external\n//     onlyOwner()\n//   {\n//     proposedAggregator = AggregatorV2V3Interface(_aggregator);\n//   }\n\n//   /**\n//    * @notice Allows the owner to confirm and change the address\n//    * to the proposed aggregator\n//    * @dev Reverts if the given address doesn't match what was previously\n//    * proposed\n//    * @param _aggregator The new address for the aggregator contract\n//    */\n//   function confirmAggregator(address _aggregator)\n//     external\n//     onlyOwner()\n//   {\n//     require(_aggregator == address(proposedAggregator), \"Invalid proposed aggregator\");\n//     delete proposedAggregator;\n//     setAggregator(_aggregator);\n//   }\n\n\n//   /*\n//    * Internal\n//    */\n\n//   function setAggregator(address _aggregator)\n//     internal\n//   {\n//     uint16 id = currentPhase.id + 1;\n//     currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\n//     phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\n//   }\n\n//   function addPhase(\n//     uint16 _phase,\n//     uint64 _originalId\n//   )\n//     internal\n//     view\n//     returns (uint80)\n//   {\n//     return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\n//   }\n\n//   function parseIds(\n//     uint256 _roundId\n//   )\n//     internal\n//     view\n//     returns (uint16, uint64)\n//   {\n//     uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\n//     uint64 aggregatorRoundId = uint64(_roundId);\n\n//     return (phaseId, aggregatorRoundId);\n//   }\n\n//   function addPhaseIds(\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound,\n//       uint16 phaseId\n//   )\n//     internal\n//     view\n//     returns (uint80, int256, uint256, uint256, uint80)\n//   {\n//     return (\n//       addPhase(phaseId, uint64(roundId)),\n//       answer,\n//       startedAt,\n//       updatedAt,\n//       addPhase(phaseId, uint64(answeredInRound))\n//     );\n//   }\n\n//   /*\n//    * Modifiers\n//    */\n\n//   modifier hasProposal() {\n//     require(address(proposedAggregator) != address(0), \"No proposed aggregator present\");\n//     _;\n//   }\n\n// }\n\n// interface AccessControllerInterface {\n//   function hasAccess(address user, bytes calldata data) external view returns (bool);\n// }\n\n// /**\n//  * @title External Access Controlled Aggregator Proxy\n//  * @notice A trusted proxy for updating where current answers are read from\n//  * @notice This contract provides a consistent address for the\n//  * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\n//  * trusted to update it.\n//  * @notice Only access enabled addresses are allowed to access getters for\n//  * aggregated answers and round information.\n//  */\n// contract EACAggregatorProxy is AggregatorProxy {\n\n//   AccessControllerInterface public accessController;\n\n//   constructor(\n//     address _aggregator,\n//     address _accessController\n//   )\n//     public\n//     AggregatorProxy(_aggregator)\n//   {\n//     setController(_accessController);\n//   }\n\n//   /**\n//    * @notice Allows the owner to update the accessController contract address.\n//    * @param _accessController The new address for the accessController contract\n//    */\n//   function setController(address _accessController)\n//     public\n//     onlyOwner()\n//   {\n//     accessController = AccessControllerInterface(_accessController);\n//   }\n\n//   /**\n//    * @notice Reads the current answer from aggregator delegated to.\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestAnswer()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (int256)\n//   {\n//     return super.latestAnswer();\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated. This\n//    * ID includes the proxy's phase, to make sure round IDs increase even when\n//    * switching to a newly deployed aggregator.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestTimestamp()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.latestTimestamp();\n//   }\n\n//   /**\n//    * @notice get past rounds answers\n//    * @param _roundId the answer number to retrieve the answer for\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getAnswer(uint256 _roundId)\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (int256)\n//   {\n//     return super.getAnswer(_roundId);\n//   }\n\n//   /**\n//    * @notice get block timestamp when an answer was last updated\n//    * @param _roundId the answer number to retrieve the updated timestamp for\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getTimestamp(uint256 _roundId)\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.getTimestamp(_roundId);\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestRound()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.latestRound();\n//   }\n\n//   /**\n//    * @notice get data about a round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with a phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function getRoundData(uint80 _roundId)\n//     public\n//     view\n//     checkAccess()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.getRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice get data about the latest round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with a phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function latestRoundData()\n//     public\n//     view\n//     checkAccess()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.latestRoundData();\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedGetRoundData(uint80 _roundId)\n//     public\n//     view\n//     checkAccess()\n//     hasProposal()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.proposedGetRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedLatestRoundData()\n//     public\n//     view\n//     checkAccess()\n//     hasProposal()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.proposedLatestRoundData();\n//   }\n\n//   /**\n//    * @dev reverts if the caller does not have access by the accessController\n//    * contract or is the contract itself.\n//    */\n//   modifier checkAccess() {\n//     AccessControllerInterface ac = accessController;\n//     require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \"No access\");\n//     _;\n//   }\n// }\n// contract EACAggregatorProxy is AggregatorProxy {\n\n//   AccessControllerInterface public accessController;\n\n//   constructor(\n//     address _aggregator,\n//     address _accessController\n//   )\n//     public\n//     AggregatorProxy(_aggregator)\n//   {\n//     setController(_accessController);\n//   }\n\n//   /**\n//    * @notice Allows the owner to update the accessController contract address.\n//    * @param _accessController The new address for the accessController contract\n//    */\n//   function setController(address _accessController)\n//     public\n//     onlyOwner()\n//   {\n//     accessController = AccessControllerInterface(_accessController);\n//   }\n\n//   /**\n//    * @notice Reads the current answer from aggregator delegated to.\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestAnswer()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (int256)\n//   {\n//     return super.latestAnswer();\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated. This\n//    * ID includes the proxy's phase, to make sure round IDs increase even when\n//    * switching to a newly deployed aggregator.\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestTimestamp()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.latestTimestamp();\n//   }\n\n//   /**\n//    * @notice get past rounds answers\n//    * @param _roundId the answer number to retrieve the answer for\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getAnswer(uint256 _roundId)\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (int256)\n//   {\n//     return super.getAnswer(_roundId);\n//   }\n\n//   /**\n//    * @notice get block timestamp when an answer was last updated\n//    * @param _roundId the answer number to retrieve the updated timestamp for\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use getRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended getRoundData\n//    * instead which includes better verification information.\n//    */\n//   function getTimestamp(uint256 _roundId)\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.getTimestamp(_roundId);\n//   }\n\n//   /**\n//    * @notice get the latest completed round where the answer was updated\n//    * @dev overridden function to add the checkAccess() modifier\n//    *\n//    * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n//    * answer has been reached, it will simply return 0. Either wait to point to\n//    * an already answered Aggregator or use the recommended latestRoundData\n//    * instead which includes better verification information.\n//    */\n//   function latestRound()\n//     public\n//     view\n//     override\n//     checkAccess()\n//     returns (uint256)\n//   {\n//     return super.latestRound();\n//   }\n\n//   /**\n//    * @notice get data about a round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with a phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function getRoundData(uint80 _roundId)\n//     public\n//     view\n//     checkAccess()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.getRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice get data about the latest round. Consumers are encouraged to check\n//    * that they're receiving fresh data by inspecting the updatedAt and\n//    * answeredInRound return values.\n//    * Note that different underlying implementations of AggregatorV3Interface\n//    * have slightly different semantics for some of the return values. Consumers\n//    * should determine what implementations they expect to receive\n//    * data from and validate that they can properly handle return data from all\n//    * of them.\n//    * @return roundId is the round ID from the aggregator for which the data was\n//    * retrieved combined with a phase to ensure that round IDs get larger as\n//    * time moves forward.\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @dev Note that answer and updatedAt may change between queries.\n//    */\n//   function latestRoundData()\n//     public\n//     view\n//     checkAccess()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.latestRoundData();\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @param _roundId the round ID to retrieve the round data for\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedGetRoundData(uint80 _roundId)\n//     public\n//     view\n//     checkAccess()\n//     hasProposal()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.proposedGetRoundData(_roundId);\n//   }\n\n//   /**\n//    * @notice Used if an aggregator contract has been proposed.\n//    * @return roundId is the round ID for which data was retrieved\n//    * @return answer is the answer for the given round\n//    * @return startedAt is the timestamp when the round was started.\n//    * (Only some AggregatorV3Interface implementations return meaningful values)\n//    * @return updatedAt is the timestamp when the round last was updated (i.e.\n//    * answer was last computed)\n//    * @return answeredInRound is the round ID of the round in which the answer\n//    * was computed.\n//   */\n//   function proposedLatestRoundData()\n//     public\n//     view\n//     checkAccess()\n//     hasProposal()\n//     override\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     )\n//   {\n//     return super.proposedLatestRoundData();\n//   }\n\n//   /**\n//    * @dev reverts if the caller does not have access by the accessController\n//    * contract or is the contract itself.\n//    */\n//   modifier checkAccess() {\n//     AccessControllerInterface ac = accessController;\n//     require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \"No access\");\n//     _;\n//   }\n// }"
    },
    "contracts/oracle/MyVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\ncontract MyVRF is VRFConsumerBaseV2 {\n    VRFCoordinatorV2Interface public COORDINATOR;\n    address public s_owner;\n\n    uint64 s_subscriptionId;\n    address vrfCoordinator = 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D;\n    bytes32 s_keyHash =\n        0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;\n    uint32 callbackGasLimit = 40000;\n    uint16 requestConfirmations = 3;\n    uint32 numWords = 1;\n    uint256 private constant ROLL_IN_PROGRESS = 42;\n\n    event DiceRolled(uint256 indexed requestId, address indexed roller);\n    event DiceLanded(uint256 indexed requestId, uint256 indexed result);\n\n    mapping(uint256 => address) private s_rollers;\n    mapping(address => uint256) private s_results;\n\n    // constructor\n    constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        s_owner = msg.sender;\n        s_subscriptionId = subscriptionId;\n    }\n\n    //...\n    modifier onlyOwner() {\n        require(msg.sender == s_owner);\n        _;\n    }\n\n    function rollDice(address roller)\n        public\n        onlyOwner\n        returns (uint256 requestId)\n    {\n        require(s_results[roller] == 0, \"Already rolled\");\n        // Will revert if subscription is not set and funded.\n        requestId = COORDINATOR.requestRandomWords(\n            s_keyHash,\n            s_subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n\n        s_rollers[requestId] = roller;\n        s_results[roller] = ROLL_IN_PROGRESS;\n        emit DiceRolled(requestId, roller);\n    }\n\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n        internal\n        override\n    {\n        // transform the result to a number between 1 and 20 inclusively\n        uint256 d20Value = (randomWords[0] % 20) + 1;\n\n        // assign the transformed value to the address in the s_results mapping variable\n        s_results[s_rollers[requestId]] = d20Value;\n\n        // emitting event to signal that dice landed\n        emit DiceLanded(requestId, d20Value);\n    }\n\n    function house(address player) public view returns (string memory) {\n        // dice has not yet been rolled to this address\n        require(s_results[player] != 0, \"Dice not rolled\");\n\n        // not waiting for the result of a thrown dice\n        require(s_results[player] != ROLL_IN_PROGRESS, \"Roll in progress\");\n\n        // returns the house name from the name list function\n        return getHouseName(s_results[player]);\n    }\n\n    function getHouseName(uint256 id) private pure returns (string memory) {\n        // array storing the list of house's names\n        string[20] memory houseNames = [\n            \"Targaryen\",\n            \"Lannister\",\n            \"Stark\",\n            \"Tyrell\",\n            \"Baratheon\",\n            \"Martell\",\n            \"Tully\",\n            \"Bolton\",\n            \"Greyjoy\",\n            \"Arryn\",\n            \"Frey\",\n            \"Mormont\",\n            \"Tarley\",\n            \"Dayne\",\n            \"Umber\",\n            \"Valeryon\",\n            \"Manderly\",\n            \"Clegane\",\n            \"Glover\",\n            \"Karstark\"\n        ];\n\n        // returns the house name given an index\n        return houseNames[id - 1];\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}